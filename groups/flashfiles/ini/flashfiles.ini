# This file describe the commands needed to flash the board.
# it is used to generate a json file for PhoneFlashTool, and
# also to generate a script for the USB thumb drive installer.

# there are 4 types of sections:
# [output.xxx.yy] : tell the script to generate a file named xxx.yyy
# [configuration.xxx] : add a new configuration in the PhoneFlashTool droplist
#     each configuration defines the list of sets of commands.
#     each command sets will be executed in the order they are in this file.
#     for a configuration to be embeded in a json output file, it must
#     be present in the "configurations" list of it
# [command.xxxx.yyyy] : add a new command yyyy to the command set xxxxx
#     so if a configuration has sets = "format reboot" then all commands
#     [command.format.yyy] will be executed, followed by all [command.reboot.yyy]
#     if the command requires a file to be passed, you can use $my_file in the args
#     and then my_file = src:filename where src is the location of the file at
#     build time (provdatazip, image, ...).
# [group.xxxx] : add a checkbox in PFT UI, to enable/disable all commands
#     which are member of this group. the default can be overriden in a configuration
#     by setting override-xxxx = true or false.


[global]
# if you need additional files in the flashfiles.zip.
# additional-files += radio:dediprog.bin
{{#bts}}
additional-files += provdatazip:btsdata.ini
{{/bts}}

[output.flash.json]
fastboot-command-options += timeout={{timeout}} retry=1 mandatory=true
enable = true
version = {{version}}
configurations = update blank

[output.install.cmd]
sets = unlock partition erase format flash configure lock reboot
additional-files += provdatazip:installer.efi provdatazip:startup.nsh images:cache.img images:data.img
enable = {{{installer}}}

[configuration.update]
startState = pos
sets = unlock flash capsule lock reboot
default = true
description = update phone to new release
brief = update

[configuration.blank]
startState = dnx_os
sets = fwstage2 bootstrap unlock partition erase format flash capsule configure lock reboot
description = erase and flash all partitions, all data will be lost.
brief = blank

{{#capsule}}
[group.delete-capsule]
name = Disable capsule update
description = Disable capsule update by deleting the capsule file from the ESP partition
default = false
{{/capsule}}

{{#fastboot_min_battery_level}}
[output.flash.json]
fastboot-command-preconditions += battery

[parameter.battery]
name = battery
type = variable
tool = fastboot
arg = getvar battery-voltage
description = Fetch battery
computedValue = $1
filter = battery-voltage:[\s]*([0-9]+)mV
value = {{fastboot_min_battery_level}}

# The command.battery will be called before each fastboot command to get the battery level
[group.check-battery]
name = Check battery level
description = Check battery level before sending fastboot command
default = true

[command.battery]
tool = setVariable
variable = battery
description = Get battery level
group = check-battery
mandatory = false
defaultValue = {{fastboot_min_battery_level}}

# The precondition.battery will be checked before each fastboot command to ensure that battery
# level is above the specified threshold
[precondition.battery]
tool = fastboot
exception = bootstrap
description = Check battery level: ${battery}mV
expression = ${battery} >= {{fastboot_min_battery_level}}
skipOnFailure = false

{{/fastboot_min_battery_level}}
[command.unlock.unlock]
tool = fastboot
args = flashing unlock
description = Set device state to unlocked

[command.erase.misc]
tool = fastboot
args = erase misc
description = Erase misc partition

[command.erase.persistent]
tool = fastboot
args = erase persistent
description = Erase persistent partition

[command.erase.metadata]
tool = fastboot
args = erase metadata
description = Erase metadata partition

[command.format.cache]
tool = fastboot
args = format cache
description = Format cache partition

[command.flash.boot]
tool = fastboot
args = flash boot $file
file = boot:boot:boot.img
description = Flash boot partition

[command.flash.recovery]
tool = fastboot
args = flash recovery $file
file = boot:recovery:recovery.img
description = Flash recovery partition

[command.flash.system]
tool = fastboot
args = flash system $file
file = images:system.img
timeout = 600000
description = Flash system partition

[command.flash.bootloader]
tool = fastboot
args = flash bootloader $file
file = bootloader:bootloader
description = Flash bootloader partition

{{#capsule}}
[command.capsule.rm-capsule]
tool = fastboot
args = oem rm /ESP/BIOSUPDATE.FV
group = delete-capsule
description = Delete firmware capsule
{{/capsule}}

{{#oemvars}}
[command.configure.oemvars]
tool = fastboot
args = flash oemvars $file
file = provdatazip:oemvars.txt
description = Set OEM variables
{{/oemvars}}

[command.format.data]
tool = fastboot
args = format data
description = Format data partition

[group.lock-device]
name = Lock the device (it implies the userdata partition wipe)
description = Put the device in locked state at the end of the flash procedure.
default = true

[command.lock.lock]
tool = fastboot
args = flashing lock
group = lock-device
description = Set device state to locked

[command.reboot.continue]
tool = fastboot
args = {{reboot}}
description = Boot to main OS

{{#dldr}}
# For Broxton, use the dldr tool or dldrCli to flash the BIOS

[output.flash.json]
dldr-command-options += timeout={{timeout}} retry=1 mandatory=true
configurations += fw_update hw_config

[configuration.fw_update]
startState = dnx_fw
sets = dldr
description = update IFWI with dldr
brief = update IFWI

[command.dldr.flash]
tool = dldr
args = --cmd fw --fwdnx $file1 --fwimage $file2
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:ifwi.bin
description = Flashing IFWI

[group.ifwi_debug]
name = debug_ifwi
description = Flash debug ifwi
default = false

[command.dldr.flashdebug]
tool = dldr
args = --cmd fw --fwdnx $file1 --fwimage $file2
variant = userdebug eng
group = ifwi_debug
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:ifwi_debug.bin
description = Flashing IFWI

[command.dldr.startover]
tool = dldr
args = --cmd startover --flags 6
description = Restarting in OS DnX

[configuration.hw_config]
startState = dnx_fw
sets = storage_config
description = Configure hardware, this should be oneshot configuration
brief = hardware configuration

[group.emmc]
name = Set emmc primary storage
description = EMMC flash storage (UFS when not checked)
default = true

[command.storage_config.ufs]
tool = dldr
args = --cmd part --fwdnx $file1 --miscbin $file2 --dev_type ufs --idx 0
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:cfgpart.xml
description = Configure UFS LUNs

[command.storage_config.emmc]
tool = dldr
args = --cmd part --fwdnx $file1 --miscbin $file2 --dev_type emmc --idx 0
group = emmc
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:cfgpart.xml
description = Configure eMMC GPP

[output.flash_dldrcli.json]
fastboot-command-options += timeout={{timeout}} retry=1 mandatory=true
enable = true
version = {{version}}
dldrCli-command-options += timeout={{timeout}} retry=1 mandatory=true
configurations = update blank fw_update_dldrcli hw_config_dldrcli

[configuration.fw_update_dldrcli]
startState = dnx_fw
sets = dldrCli
description = update IFWI with dldrCli
brief = update IFWI

[command.dldrCli.flash]
tool = dldrCli
args = --command downloadfwos --fw_dnx $file1 --fw_image $file2
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:ifwi.bin
description = Flashing IFWI

[command.dldrCli.startover]
tool = dldrCli
args = --command startover --flags 6
description = Restarting in OS DnX

[configuration.hw_config_dldrcli]
startState = dnx_fw
sets = storage_config_dldrcli
description = Configure hardware, this should be oneshot configuration
brief = hardware configuration

[group.emmc]
name = Set emmc primary storage
description = EMMC flash storage (UFS when not checked)
default = true

[command.storage_config_dldrcli.ufs]
tool = dldrCli
args = --command configpart --fw_dnx $file1 --path $file2 --device 3 --idx 0
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:cfgpart.xml
description = Configure UFS LUNs

[command.storage_config_dldrcli.emmc]
tool = dldrCli
args = --command configpart --fw_dnx $file1 --path $file2 --device 2 --idx 0
group = emmc
file1 = provdatazip:dnxp_0x1.bin
file2 = provdatazip:cfgpart.xml
description = Configure eMMC GPP

{{/dldr}}

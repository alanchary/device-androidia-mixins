# Init config file dedicated to the Telemetry components

# init.telemetry_userdebug.rc contains useful content in userdebug images
# and nothing in user builds
import init.telemetry_userdebug.rc

# The Telemetry client daemon
#
# The server name and port are picked from the
# persist.intel.tm.server_{name,port} system properties. By default the
# daemon is disabled. It will be started by init based on value of property
# persist.intel.tm.state that has a trigger associated with it in this file.
service telemetryd /system/bin/telemetryd /data /cache
    class late_start
    user telemetry
    group telemetry inet cache
    disabled

# Mount and unmount the Telemetry daemon's queue storage directories
service tm_storage /system/bin/tm_storage_setup update /data /cache
    class core
    user root
    group root
    disabled
    oneshot

# When new filesystems are mounted check if we need to update the datastores.
# No trigger on post-fs-data because that also causes the persist.* properties
# to be loaded and triggers property:persist.intel.tm.state=enabled/disabled.
on post-fs
    start tm_storage

# Only start daemon if explicitly allowed by the user via the state
# property
on property:persist.intel.tm.state=enabled
    # Fixme: this may have no effect as it may be triggered simultaneously
    # with "on post-fs" and init will not launch two instances of tm_storage
    start tm_storage
    start telemetryd

on property:persist.intel.tm.state=disabled
    stop telemetryd
    # Call the storage update script to tear down the datastores.
    start tm_storage

# This will trigger when cryptfs resets the main and late_start classes
# before trying to unmount /data when setting up encryption.  Telemetryd
# must have stopped using /data/telemetry and we must unmount it for the
# /data unmount to succeed.
on property:init.svc.telemetryd=stopped
    start tm_storage

# debuggerd does not check/create /data/tombstones on start, instead this
# directory is created when first tombstone is written. If we (tm_fprobe)
# want to start monitoring this directory we need it to exist, so create
# it here.  The chmod/chown are there to make updates work from versions
# that used root:root and 0755.
on post-fs-data
    mkdir /data/tombstones 0775 system system
    chmod 0775 /data/tombstones
    chown telemetry telemetry /data/tombstones/telemetry_last_processed

# start the file probe that waits for particular files (eg. tombstones) to
# be created from which it will create records where the daemon
# (telemetryd) can find them to pass on to the frontend. The probe
# will drop the root uid but retain CAP_DAC_READ_SEARCH and the "system"
# gid to be able to read the tombstone files (0600) and write to the
# tombstones directory.
service tm_fprobe /system/bin/tm_fprobe
    class main
    user root
    group system

# the pstore probe depends on pstore-clean which is launched as part of
# class core. It does a one-time check to see if any crash dumps have been
# saved before reboot and creates a telemetry report if so.
service tm_pstore_probe /system/bin/tm_pstore_probe
    class core
    user root
    group system
    oneshot
    disabled
on property:init.svc.pstore-clean=stopped
    start tm_pstore_probe

# start the probe that watches dmesg for Oops messages and reports them live.
# The probe will drop the root uid but retain CAP_SYSLOG
service tm_dmesg_probe /system/bin/tm_dmesg_probe
    class core
    user root
    group telemetry

# start the log-line count probe
service tm_logcnt_probe /system/bin/tm_logcount_probe
    class core
    user telemetry
    group telemetry

# the log probe scans the logs (system, main, events, and radio) for errors
# by default and can be configured for many more.
service tm_logprobe /system/bin/tm_logprobe
    class main
    user telemetry
    group telemetry cache log
